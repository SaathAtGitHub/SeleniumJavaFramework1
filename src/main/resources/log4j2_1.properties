# Code in this file is copied from "Log4J 2 Configuration: Using Properties File" https://springframework.guru/log4j-2-configuration-using-properties-file/ 
# Run Log4jDemo.java (located in this same package) to see the result of this file as this XML is linked with that file 

#/* I've created this file by by following steps explained @ 9:02, in this video: "Selenium Framework for Beginners 14 | What is Log4j | How to add Log4j in java project" 
# * located at https://www.youtube.com/watch?v=rbuR9Q_55h4&list=PLhW3qG5bs-L8oRay6qeS70vJYZ3SBQnFa&index=16
# * 
# * TEST RESULT (Test ran on December 8, 2019):	
# * This file is linked with log4j2.properties. This test prints the log on Console window but for some reason, fails to print log in
# * LogForLog4jDemoDotJava.log or MyLog.log files. I didn't dig to know why so need to google out the reason. 


name=PropertiesConfig
property.filename = logs
appenders = console, file
# The preceding code declares two appenders, named console and file - as written here: https://springframework.guru/log4j-2-configuration-using-properties-file/

# Next, let's configure both the appenders to write log messages to the console and a file. The configuration code for the appenders is below - as written here: https://springframework.guru/log4j-2-configuration-using-properties-file/
appender.console.type = Console
appender.console.name = STDOUT
appender.console.layout.type = PatternLayout
appender.console.layout.pattern = [%-5level] %d{yyyy-MM-dd HH:mm:ss.SSS} [%t] %c{1} - %msg%n

appender.file.type = File
appender.file.name = LOGFILE
# Assign the log file name below
appender.file.fileName=${filename}/LogsForLog4jDemoDotJava.log
# appender.file.fileName=${filename}/propertieslogs.log
appender.file.layout.type=PatternLayout
appender.file.layout.pattern=[%-5level] %d{yyyy-MM-dd HH:mm:ss.SSS} [%t] %c{1} - %msg%n

# In the code above we configured two appenders: One to write log messages to the console and the other to a log file. Both the appenders use pattern layouts that are configurable with conversion pattern strings to format log messages. The appender.console.layout.pattern property specifies the pattern string. You can learn more about the pattern layout and conversion pattern strings here. For the file appender, we used the appender.file.fileName property to specify the name and location of the log file that Log4J 2 will generate. Here, notice the ${filename} declaration that we used as a substitution for the property.filename property we declared earlier - as written here: https://springframework.guru/log4j-2-configuration-using-properties-file/
# -------------

# Using below statement log will get appended to previous logs. If you don't use below statement then logs will get overwritten.
appender.file.append=true

loggers=file
# Assign package name below
logger.file.name=demo 
logger.file.level = debug
# logger.file.level = ALL


logger.file.level = trace
# User the statement below if you want to turn OFF logging / getting logs printed.
# logger.file.level = off
logger.file.appenderRefs = file
logger.file.appenderRef.file.ref = LOGFILE
# Next we will configure the loggers, starting from the root logger. In the code above, we configured the root logger to log debug and its lower level messages to the console (stdout).  - as written here: https://springframework.guru/log4j-2-configuration-using-properties-file/

# rootLogger.level = debug
rootLogger.level = trace
# rootLogger.level = ALL
# User the statement below if you want to turn OFF logging / getting logs printed.
# logger.file.level = off
rootLogger.appenderRefs = stdout
rootLogger.appenderRef.stdout.ref = STDOUT

# In the example above, it is due to logger additivity that caused log messages to be sent to the file by the logger and additively to the console by the root logger. You can override this default behavior by setting the additivity flag of a logger to false.

# logger.file.additivity = false

# The property above configures our file appender so that it is no longer additive. Thus, log messages will only be sent to the file.